#! /usr/bin/env python

import argparse
import glob
import os
import shutil
import signal
import subprocess
import sys


# Define the libraries the application depends on
libList = ['glum-1.3.7.jar', 'guava-18.0.jar', 'distMaker.jar']


def buildRelease(aVersion, aDoNotClean=False):
	"""Method that builds a release of DistMaker. Upon sucessful execution, a
	tar.gz archive will be generated named: 'DistMaker-<aVersion>.tar.gz'. Note
	that releases of DistMaker aVersion 0.50 or later (2018May01+) will no longer
	include static JREs."""
	# Retrieve the install path
	installPath = getInstallRoot()
	installPath = os.path.dirname(installPath)

	# Determine the workPath
	workPath = os.path.join(installPath, 'release', 'DistMaker-' + aVersion)
	destFileGZ = os.path.join(installPath, 'release', 'DistMaker-' + aVersion + '.tar.gz')

	# Bail if the work folder for which we compose the release already exists
	if os.path.exists(workPath) == True:
		errPrintln('\tAborting DistMaker release build. Release folder already exists: ' + workPath)
		exit(-1)

	# Bail if the release already exists
	if os.path.exists(destFileGZ) == True:
		errPrintln('\tAborting DistMaker release build. Release already exists. File: ' + destFileGZ)
		exit(-1)

	# Laydown the structure, and let the user know of the version we are building
	print('Building DistMaker release ' + aVersion + '...')
	os.mkdir(workPath)

	# Copy the regular docs
	dstPath = os.path.join(workPath, 'doc')
	os.mkdir(dstPath)
	for aFile in ['QuickStartGuide.pdf', 'ReadMe.txt']:
		srcPath = os.path.join(installPath, 'doc', aFile)
		shutil.copy2(srcPath, dstPath)

	# Copy the legal documents
	dstPath = os.path.join(workPath, 'doc/legal')
	os.mkdir(dstPath)
	for aFile in glob.glob('doc/legal/*txt'):
		srcPath = os.path.join(installPath, aFile)
		shutil.copy2(srcPath, dstPath)

	# Copy the libraries
	dstPath = os.path.join(workPath, 'lib')
	os.mkdir(dstPath)
	for aLib in libList:
		srcPath = os.path.join(installPath, 'lib', aLib)
		shutil.copy2(srcPath, dstPath)

	# Copy the scripts
	dstPath = os.path.join(workPath, 'script')
	os.mkdir(dstPath)
	for aScript in ['appleUtils.py', 'linuxUtils.py', 'windowsUtils.py', 'buildDist.py', 'deployAppDist.py', 'deployJreDist.py', 'jreUtils.py', 'logUtils.py', 'miscUtils.py']:
		srcPath = os.path.join(installPath, 'script', aScript)
		shutil.copy2(srcPath, dstPath)

	# Setup the template tree
	dstPath = os.path.join(workPath, 'template')
	os.makedirs(dstPath + '/apple')
	os.makedirs(dstPath + '/background')
	os.makedirs(dstPath + '/launch4j')
	for aFile in ['appLauncher.jar', 'JreCatalog.txt', 'apple/.DS_Store.template', 'apple/JavaAppLauncher', 'background/background.png', 'launch4j/launch4j-3.12-linux-x64.tgz', 'launch4j/launch4j-3.12-linux.tgz', 'launch4j/launch4j-3.12-macosx-x86.tgz']:
		srcPath = os.path.join(installPath, 'template', aFile)
		shutil.copy2(srcPath, dstPath + '/' + aFile)

	# Form the archive
	exeCmd = ['tar', '-czf', destFileGZ, '-C', os.path.dirname(workPath), os.path.basename(workPath)]
	retCode = subprocess.call(exeCmd)
	if retCode != 0:
		print('Failed to build tar.gz file: ' + destFileGZ)
		exit(-1)

	# Remove the workPath
	if aDoNotClean == False:
		shutil.rmtree(workPath)

	print('DistMaker release ' + aVersion + ' built.')


def errPrintln(aMessage=''):
	"""Print the specified string with a trailing newline to stderr. Each tab
	character will be replaced with: 3 spaces"""
	aMessage = aMessage.replace('\t', '   ')
	sys.stderr.write(aMessage + '\n')


def getDistMakerVersion():
	"""Method that will return the version of the distMaker.jar file that resides
	in the library path. The version of the DistMaker release is defined by the
	value associated with the disMaker.jar file. Any failures will result in the
	abrupt exit of this script."""
	# Retrieve the install path
	installPath = getInstallRoot()
	installPath = os.path.dirname(installPath)

	# Check for distMaker.jar library prerequisite
	testPath = os.path.join(installPath, 'lib', 'distMaker.jar')
	if os.path.exists(testPath) == False:
		errPrintln('\tAborting DistMaker release build. The file  ' + testPath + ' does not exist.')
		errPrintln('\tPlease run the buildDistMakerBin.jardesc from your workspace.')
		exit(-1)

	try:
		cpStr = ':lib/'.join(libList)
		cpStr = 'lib/' + cpStr
		exeCmd = ['java', '-cp', cpStr, 'distMaker.DistApp', '--version']
		output = subprocess.check_output(exeCmd).decode('utf-8')
		version = output.split()[1]
		return version
	except:
		errPrintln('\tPlease run the buildDistMakerBin.jardesc from your workspace.')
		exit(-1)


def getInstallRoot():
	"""Returns the root path where the running script is installed."""
	argv = sys.argv;
	installRoot = os.path.dirname(argv[0])
# 	print('appInstallRoot: ' + appInstallRoot)
	return installRoot


def handleSignal(signal, frame):
	"""Signal handler, typically used to capture ctrl-c."""
	print('User aborted processing!')
	sys.exit(0)


if __name__ == "__main__":
	# Logic to capture Ctrl-C and bail
	signal.signal(signal.SIGINT, handleSignal)

	# Require python version 2.7 or later
	targVer = (2, 7)
	if sys.version_info < targVer:
		print('The installed version of python is too old. Please upgrade.')
		print('   Current version: ' + '.'.join(str(i) for i in sys.version_info))
		print('   Require version: ' + '.'.join(str(i) for i in targVer))
		sys.exit(-1)

	tmpDescr = 'Utility to build a DistMaker release\n'
	parser = argparse.ArgumentParser(prefix_chars='-', description=tmpDescr, add_help=False, fromfile_prefix_chars='@')
	parser.add_argument('--help', '-h', help='Show this help message and exit.', action='help')
	parser.add_argument('--doNotClean', default=False, action='store_true', help='Do NOT remove temporary work folder created while generating release.')
	parser.add_argument('--doFullBuild', default=False, action='store_true', help='Force a full build of the main jar file. (Unsupported action)')

	# Intercept any request for a  help message and bail
	argv = sys.argv;
	if '-h' in argv or '-help' in argv or '--help' in argv:
		parser.print_help()
		exit()

	# Parse the args
	parser.formatter_class.max_help_position = 50
	args = parser.parse_args()

	# Get the version of DistMaker we are building
	version = getDistMakerVersion()
	print('DistMaker version: ' + version)

	# TODO: Finish this functionality
	if args.doFullBuild == True:
		print("Unsupported action: [--doFullBuild]. Skipping...")

	buildRelease(version, args.doNotClean)
